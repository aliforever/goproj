package funcs

import (
	"errors"
	"%BOTUSERNAME%/lang"
	"%BOTUSERNAME%/models"
	"fmt"
	"log"
	"reflect"

	"%BOTUSERNAME%/configs"

	"strconv"

	"strings"

	"github.com/go-telegram-bot-api/telegram-bot-api"
	"gopkg.in/mgo.v2/bson"
)

type %BOTUSERNAME_CAPS% struct {
	Update      *tgbotapi.Update
	CurrentUser *models.User
	Redirected  bool
	Language    lang.Language
}

func (bot *%BOTUSERNAME_CAPS%) ProcessUpdate(update tgbotapi.Update) {
	bot.Update = &update
	message := bot.Update.Message
	callback := bot.Update.CallbackQuery
	inlineQuery := bot.Update.InlineQuery

	bot.Language = &lang.Persian{}
	if message == nil && callback == nil && inlineQuery == nil {
		return
	}
	err := bot.RegisterOrUpdateUser()
	if err != nil {
		log.Println(err)
		return
	}
	if message != nil {
		bot.ProcessMenu()
	} else if callback != nil {
		bot.ProcessCallback()
	} else {
		return
	}
	/*bot.SwitchMenu("MainMenu")*/

}

func (bot *%BOTUSERNAME_CAPS%) ProcessMenu() {
	menu := bot.CurrentUser.Menu
	st := reflect.TypeOf(bot)
	_, ok := st.MethodByName(menu)
	if ok {
		bot.Redirected = false
		reflect.ValueOf(bot).MethodByName(menu).Call([]reflect.Value{})
		return
	}
	bot.SwitchMenu("MainMenu")
}

func (bot *%BOTUSERNAME_CAPS%) ProcessCallback() {
	callback := bot.Update.CallbackQuery
	split := strings.Split(callback.Data, ":")
	itemsMap := map[string]func(data []string){}
	if _, ok := itemsMap[split[0]]; ok {
		itemsMap[split[0]](split[1:])
		return
	}
	bot.SendToCurrentChat("Callback Query Handler not Found: " + callback.Data)
}

func (bot *%BOTUSERNAME_CAPS%) RegisterOrUpdateUser() (err error) {
	from := bot.GetFrom()
	if from == nil {
		err = errors.New("nil_from")
		return
	}

	user, err := models.GetUserById(from.ID)
	if err == nil {
		bsonMap := bson.M{}
		bsonMap["first_name"] = from.FirstName
		if from.LastName != "" {
			bsonMap["last_name"] = from.LastName
		}
		if from.UserName != "" {
			bsonMap["username"] = from.UserName
		}
		err = user.Update(&bsonMap)

	} else {
		user = &models.User{}
		user.Id = from.ID
		user.FirstName = from.FirstName
		user.LastName = from.LastName
		user.Username = from.UserName
		err = user.Insert()
	}
	if err != nil {
		return
	}
	bot.CurrentUser = user
	return
}



func (bot *%BOTUSERNAME_CAPS%) MainMenu() {
	bot.CurrentUser.UpdateMenu("MainMenu")
	items := map[string]func(){}
	if _, ok := items[bot.Update.Message.Text]; ok {
		bot.Redirected = true
		items[bot.Update.Message.Text]()
		return
	}
	bot.SendToCurrentChatKeyboard(bot.Language.MainMenuText(), bot.MainMenuKeyboard())
}

func (bot *%BOTUSERNAME_CAPS%) MainMenuKeyboard() (keyboard *tgbotapi.ReplyKeyboardMarkup) {
	var rows [][]string
	rows = append(rows, []string{bot.Language.BackBtnText()})
	keyboard = MakeReplyKeyboardFromArray(rows)
	return
}
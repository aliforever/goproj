package funcs

import (
	"errors"
	"%BOTUSERNAME%/lang"
	"%BOTUSERNAME%/models"
	"fmt"
	"log"
	"reflect"

	"%BOTUSERNAME%/configs"

	"strconv"

	"strings"

	"github.com/go-telegram-bot-api/telegram-bot-api"
	"gopkg.in/mgo.v2/bson"
)

type %BOTUSERNAME_CAPS% struct {
	Update      *tgbotapi.Update
	CurrentUser *models.User
	Redirected  bool
	Language    lang.Language
}

func (bot *%BOTUSERNAME_CAPS%) ProcessUpdate(update tgbotapi.Update) {
	bot.Update = &update
	message := bot.Update.Message
	callback := bot.Update.CallbackQuery
	inlineQuery := bot.Update.InlineQuery

	bot.Language = &lang.Persian{}
	if message == nil && callback == nil && inlineQuery == nil {
		return
	}
	err := bot.RegisterOrUpdateUser()
	if err != nil {
		log.Println(err)
		return
	}
	if message != nil {
		bot.ProcessMenu()
	} else if callback != nil {
		bot.ProcessCallback()
	} else {
		return
	}
	/*bot.SwitchMenu("MainMenu")*/

}

func (bot *%BOTUSERNAME_CAPS%) ProcessMenu() {
	menu := bot.CurrentUser.Menu
	st := reflect.TypeOf(bot)
	_, ok := st.MethodByName(menu)
	if ok {
		bot.Redirected = false
		reflect.ValueOf(bot).MethodByName(menu).Call([]reflect.Value{})
		return
	}
	bot.SwitchMenu("MainMenu")
}

func (bot *%BOTUSERNAME_CAPS%) ProcessCallback() {
	callback := bot.Update.CallbackQuery
	split := strings.Split(callback.Data, ":")
	itemsMap := map[string]func(data []string){}
	if _, ok := itemsMap[split[0]]; ok {
		itemsMap[split[0]](split[1:])
		return
	}
	bot.SendToCurrentChat("Callback Query Handler not Found: " + callback.Data)
}


func (bot *%BOTUSERNAME_CAPS%) GetFrom() (u *tgbotapi.User) {
	if bot.Update.Message != nil {
		u = bot.Update.Message.From
	} else if bot.Update.CallbackQuery != nil {
		u = bot.Update.CallbackQuery.From
	} else if bot.Update.InlineQuery != nil {
		u = bot.Update.InlineQuery.From
	}
	return
}

func (bot *%BOTUSERNAME_CAPS%) GetMessage() (m *tgbotapi.Message) {
	if bot.Update.Message != nil {
		m = bot.Update.Message
	} else if bot.Update.CallbackQuery != nil {
		m = bot.Update.CallbackQuery.Message
	}
	return
}

func (bot *%BOTUSERNAME_CAPS%) RegisterOrUpdateUser() (err error) {
	from := bot.GetFrom()
	if from == nil {
		err = errors.New("nil_from")
		return
	}

	user, err := models.GetUserById(from.ID)
	if err == nil {
		bsonMap := bson.M{}
		bsonMap["first_name"] = from.FirstName
		if from.LastName != "" {
			bsonMap["last_name"] = from.LastName
		}
		if from.UserName != "" {
			bsonMap["username"] = from.UserName
		}
		err = user.Update(&bsonMap)

	} else {
		user = &models.User{}
		user.Id = from.ID
		user.FirstName = from.FirstName
		user.LastName = from.LastName
		user.Username = from.UserName
		err = user.Insert()
	}
	if err != nil {
		return
	}
	bot.CurrentUser = user
	return
}

func (bot *%BOTUSERNAME_CAPS%) SwitchMenu(name string) {
	st := reflect.TypeOf(bot)
	_, ok := st.MethodByName(name)
	if !ok {
		bot.SendToCurrentChat("Invalid Menu " + name)
		bot.CurrentUser.UpdateMenu("MainMenu")
		return
	}
	bot.Redirected = true
	reflect.ValueOf(bot).MethodByName(name).Call([]reflect.Value{})
}

func (bot *%BOTUSERNAME_CAPS%) MainMenu() {
	bot.CurrentUser.UpdateMenu("MainMenu")
	items := map[string]func(){}
	if _, ok := items[bot.Update.Message.Text]; ok {
		bot.Redirected = true
		items[bot.Update.Message.Text]()
		return
	}
	bot.SendToCurrentChatKeyboard("Main Menu", bot.MainMenuKeyboard())
}

func (bot *%BOTUSERNAME_CAPS%) MainMenuKeyboard() (keyboard *tgbotapi.ReplyKeyboardMarkup) {
	var rows [][]string
	rows = append(rows, []string{"back"})
	keyboard = MakeReplyKeyboardFromArray(rows)
	return
}


func (bot *%BOTUSERNAME_CAPS%) SendPhotoIdWithCaptionToChatId(photoId, caption string, chatId int) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewPhotoShare(int64(chatId), photoId)
	chattable.Caption = caption
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) EditChatMessageKeyboardInline(chatId, messageId int, keyboard *tgbotapi.InlineKeyboardMarkup) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewEditMessageReplyMarkup(int64(chatId), messageId, *keyboard)
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) EditCurrentChatMessage(text string, keyboard *tgbotapi.InlineKeyboardMarkup) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewEditMessageText(int64(bot.GetFrom().ID), bot.GetMessage().MessageID, text)
	chattable.ReplyMarkup = keyboard
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) SendPhotoIdToCurrentGroup(photoId string, parameters ...map[string]interface{}) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewPhotoShare(bot.Update.Message.Chat.ID, photoId)
	for _, parameter := range parameters {
		for key, value := range parameter {
			if key == "reply_to_message_id" {
				if value.(int) != 0 {
					chattable.ReplyToMessageID = value.(int)
				}
			}
		}
	}
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) SendVoiceIdToCurrentGroup(voiceId string, parameters ...map[string]interface{}) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewVoiceShare(bot.Update.Message.Chat.ID, voiceId)
	for _, parameter := range parameters {
		for key, value := range parameter {
			if key == "reply_to_message_id" {
				if value.(int) != 0 {
					chattable.ReplyToMessageID = value.(int)
				}
			}
		}
	}
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) SendPhotoIdWithCaptionToCurrentChat(photoId, caption string) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewPhotoShare(int64(bot.CurrentUser.Id), photoId)
	chattable.Caption = caption
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) SendPhotoIdWithCaptionToCurrentChatInlineKeyboard(photoId, caption string, keyboard *tgbotapi.InlineKeyboardMarkup) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewPhotoShare(int64(bot.CurrentUser.Id), photoId)
	chattable.Caption = caption
	chattable.ReplyMarkup = keyboard
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) SendPhotoUploadWithCaptionToCurrentChat(file interface{}, caption string) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewPhotoUpload(int64(bot.CurrentUser.Id), file)
	chattable.Caption = caption
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) SendToCurrentChat(text string, parameters ...map[string]interface{}) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewMessage(int64(bot.CurrentUser.Id), text)
	for _, parameter := range parameters {
		for key, value := range parameter {
			if key == "disable_web_page_preview" {
				if value.(bool) == true {
					chattable.DisableWebPagePreview = true
				}
			}
			if key == "reply_to_message_id" {
				if value.(int) != 0 {
					chattable.ReplyToMessageID = value.(int)
				}
			}
		}
	}
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) SendFileToCurrentChat(path string) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewDocumentUpload(bot.Update.Message.Chat.ID, path)
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) SendToCurrentGroup(text string, parameters ...map[string]interface{}) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewMessage(int64(bot.Update.Message.Chat.ID), text)
	for _, parameter := range parameters {
		for key, value := range parameter {
			if key == "disable_web_page_preview" {
				if value.(bool) == true {
					chattable.DisableWebPagePreview = true
				}
			}
			if key == "reply_to_message_id" {
				if value.(int) != 0 {
					chattable.ReplyToMessageID = value.(int)
				}
			}
			if key == "parse_mode" {
				if value.(string) != "" {
					chattable.ParseMode = value.(string)
				}
			}
		}
	}
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) SendToCurrentGroupInlineKeyboard(text string, keyboard *tgbotapi.InlineKeyboardMarkup, parameters ...map[string]interface{}) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewMessage(int64(bot.Update.Message.Chat.ID), text)
	for _, parameter := range parameters {
		for key, value := range parameter {
			if key == "disable_web_page_preview" {
				if value.(bool) == true {
					chattable.DisableWebPagePreview = true
				}
			}
			if key == "reply_to_message_id" {
				if value.(int) != 0 {
					chattable.ReplyToMessageID = value.(int)
				}
			}
			if key == "parse_mode" {
				if value.(string) != "" {
					chattable.ParseMode = value.(string)
				}
			}
		}
	}
	chattable.ReplyMarkup = keyboard
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) SendToChatId(chatId int, text string, parameters ...map[string]interface{}) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewMessage(int64(chatId), text)
	for _, parameter := range parameters {
		for key, value := range parameter {
			if key == "disable_web_page_preview" {
				if value.(bool) == true {
					chattable.DisableWebPagePreview = value.(bool)
				}
			}
			if key == "reply_to_message_id" {
				if value.(int) != 0 {
					chattable.ReplyToMessageID = value.(int)
				}
			}
			if key == "parse_mode" {
				if value.(string) != "" {
					chattable.ParseMode = value.(string)
				}
			}
		}
	}
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) SendToCurrentChatKeyboard(text string, keyboard *tgbotapi.ReplyKeyboardMarkup) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewMessage(int64(bot.CurrentUser.Id), text)
	chattable.ReplyMarkup = keyboard
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) EditCurrentChatMessageTextInlineKeyboard(text string, keyboard *tgbotapi.InlineKeyboardMarkup) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewEditMessageText(int64(bot.CurrentUser.Id), bot.GetMessage().MessageID, text)
	chattable.ReplyMarkup = keyboard
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) SendToCurrentChatInlineKeyboard(text string, keyboard *tgbotapi.InlineKeyboardMarkup) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewMessage(int64(bot.CurrentUser.Id), text)
	chattable.ReplyMarkup = keyboard
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) ForwardToChatId(chatId int) (tgbotapi.Message, error) {
	chattable := tgbotapi.NewForward(int64(chatId), int64(bot.GetFrom().ID), bot.Update.Message.MessageID)
	return models.API.Send(chattable)
}

func (bot *%BOTUSERNAME_CAPS%) DeleteCurrentMessage() (tgbotapi.APIResponse, error) {
	chattable := tgbotapi.DeleteMessageConfig{MessageID: bot.GetMessage().MessageID, ChatID: int64(bot.GetFrom().ID)}
	return models.API.DeleteMessage(chattable)
}
